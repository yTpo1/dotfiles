# -------------------------------------------------------
# Zsh special functions and Promt Escapes
# -------------------------------------------------------
#
# Git integration
# https://arjanvandergaag.nl/blog/customize-zsh-prompt-with-vcs-info.html

autoload -Uz vcs_info
#zstyle ':vcs_info:*' enable git # mininal and default
#zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git*' formats " %b"
# precmd - Executed before each prompt. Note that precommand functions are not re-executed simply because the command line is redrawn, as happens, for example, when a notification about an exiting job is displayed.
precmd() {
	vcs_info
	DEFAULT_PROMPT='%F{cyan}%~'
	PYVENV='(venv) '
	if [[ -n ${vcs_info_msg_0_} ]]; then
		STATUS=$(command git status --porcelain 2> /dev/null | tail -n1)
		if [[ -n $STATUS ]]; then
			PROMPT='%F{cyan}%~%F{red}${vcs_info_msg_0_}%f '
		else
			PROMPT='%F{cyan}%~%F{blue}${vcs_info_msg_0_}%f '
		fi
	else
		#PROMPT='%F{cyan}%~%F{green}%f '
		PROMPT=$DEFAULT_PROMPT'%f '
	fi
	if [[ -n $VIRTUAL_ENV ]]; then
		PROMPT=$PYVENV$PROMPT
	fi
	if [[ -n $SSH_CLIENT ]]; then
		PROMPT=SSH\ $PROMPT
	fi

}

# -------------------------------------------------------
# Zsh vim cursor type
# Change cursor shape for different vi modes.
#
# zle-keymap-select - Executed every time the keymap changes, i.e. the special parameter KEYMAP is set to a different value, while the line editor is active. Initialising the keymap when the line editor starts does not cause the widget to be called.
# The value $KEYMAP within the function reflects the new keymap. The old keymap is passed as the sole argument.
# This can be used for detecting switches between the vi command (vicmd) and insert (usually main) keymaps.

function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}

zle -N zle-keymap-select

zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}

zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.

preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# -------------------------------------------------------
# My functions
# -------------------------------------------------------
ls-dir-date() {
	#find -maxdepth 1 -type d -printf "%TY-%Tm-%Td %TH:%TM %p\n" | sort -n
	find -maxdepth 1 -type d -printf "%TY-%Tm-%Td %TH:%TM \033[1;34m %p \033[0 \033[0mm\n" | sort -n
}
ls-date() {
	# -t     sort by time, newest first; see --time
	# -r, --reverse    reverse order while sorting
	ls -ltr | awk '{for (i=6; i<NF; i++) printf $i " "; print $NF}'
}

## ls modifications
#lsdate() {
#	ls -alt | awk '{print $7,$6,$8, "\033[1;34m" $9 "\033[0m" }';
###alias lsdate="ls --color=auto -alt | awk '{print $6,$7,$8,$9 }'"
#}
#lsdate-newest() {
#	ls -altr | awk '{print $7,$6,$8, "\033[1;34m" $9 "\033[0m" }';
#}
#lsdir() {
#	ls -d $1/*/
#}


#
# Clipboard
to-clipboard() { xclip -selection c ;}

to-grafical() { dragon $1 ;}

# -------------------------------------------------------
# Extracting, Archiving, Compressing [tar, tar.gz, zip]

# extracts tar.gz
extr-tar() { tar -C $2 -xvf $1 ;}
alias untar="extr-tar"

# For zip files use "unzip [filename]"

# -------------------------------------------------------
# CUE Splitting (Music Flac)
# https://honghaco.github.io/howto/2016/08/19/split-lossless-audio-files.html
#
# ToDo: sometimes creates an empty track00, which messes up tagging and remaning
# $1 - .cue
# $2 - .flac
mus-split-flac() {
	#shnsplit -f $1 -o flac $2
	shnsplit -f $1 -t %n-%t -o flac $2
	#shnsplit -d Split -f *.cue -o "flac flac -V --best -o %f -" *.flac -t "%n %p - %t"

	if [ -f Split/00-pregap.flac ]; then
		rm -f Split/00*pregap*
	fi

	#cuetag.sh $1 split-track*.flac
	cuetag.sh $1 [0-9]*.flac
	#cuetag *.cue Split/*.flac

	mkdir Split_tracks
	##mv split-track* Split_tracks
	mv [0-9]*.flac Split_tracks
}

mus-split-cue() {
	# Souce:
	# https://bbs.archlinux.org/viewtopic.php?id=75774
	
	SDIR=`pwd`

	if [ "$1" = "" ]
	  then
	    DIR=$SDIR
	else
	    case $1 in
		-h | --help )
		    echo "Usage: cuesplit [Path]"
		    echo "       The default path is the current directory."
		    exit
		    ;;
		* )
		DIR=$1
	    esac
	fi

	echo -e "\

	Directory: $DIR
	________________________________________
	"
	cd "$DIR"
	TYPE=`ls -t1`

	case $TYPE in
	    *.ape*)
		mkdir split
		shnsplit -d split -f *.cue -o "flac flac -V --best -o %f -" *.ape -t "%n %p - %t"
		rm -f split/00*pregap*
		cuetag.sh *.cue split/*.flac
		exit
		;;

	    *.flac*)
		mkdir split
		shnsplit -d split -f *.cue -o "flac flac -V --best -o %f -" *.flac -t "%n %p - %t"
		rm -f split/00*pregap*
		cuetag.sh *.cue split/*.flac
		#exit
		;;

	    *.mp3*)
		mp3splt -no "@n @p - @t (split)" -c *.cue *.mp3
		cuetag.sh *.cue *split\).mp3
		exit
		;;

	    *.ogg*)
		mp3splt -no "@n @p - @t (split)" -c *.cue *.ogg
		cuetag.sh *.cue *split\).ogg
		exit
		;;

	    *.tta*)
		mkdir split
		shnsplit -d split -f *.cue -o "flac flac -V --best -o %f -" *.tta -t "%n %p - %t"
		rm -f split/00*pregap*
		cuetag.sh *.cue split/*.flac
		exit
		;;

	    *.wv*)
		mkdir split
		shnsplit -d split -f *.cue -o "flac flac -V --best -o %f -" *.wv -t "%n %p - %t"
		rm -f split/00*pregap*
		cuetag.sh *.cue split/*.flac
		exit
		;;

	    *.wav*)
		mkdir split
		shnsplit -d split -f *.cue -o "flac flac -V --best -o %f -" *.wav -t "%n %p - %t"
		rm -f split/00*pregap*
		cuetag.sh *.cue split/*.flac
		exit
		;;

	    * )
	    echo "Error: Found no files to split!"
	    echo "       --> APE, FLAC, MP3, OGG, TTA, WV, WAV"
	esac
	#exit
}

#
# Obsolete
## $1=file.cue $2=file.flac
#mus-split-rename-flac() {
#	#cuebreakpoints sample.cue | shnsplit -o flac sample.flac
#
#	shnsplit -f $1 -o flac $2
#	cuetag.sh $1 split-track*.flac
#	mkdir Split_tracks
#	mv split-track* Split_tracks
#	cd Split_tracks
#	rename-split-files split-track*.flac
#
#	#mkdir Split_tracks
#	#mv split-track* Split_tracks
#	#cp $1 Split_tracks
#	#cd Split_tracks
#	#cuetag.sh $1 *.flac
#}
## copied this bash script and converted it to zsh
## https://gist.github.com/dlp/5fdee0541ad0c2382840990c8c74e739
#rename-split-files() {
#	for f in "$@"
#	do
#		mv "$f" "$(get_new_name "$f")"
#	done
#}
#get_new_name() {
#	num=$(gettag "$1" TRACKNUMBER)
#	title=$(gettag "$1" TITLE)
#	printf "%s %s.flac" "${num}" "${title}"
#}
#gettag() {
#	# <--show-tag=NAME> Show all tags where the the field name matches NAME. 
#	metaflac --show-tag="$2" "$1" | sed -e "s/.*=//"
#}

# -------------------------------------------------------
# Music - create .m3u playlist from files in current dir

# $1 filename
create_playlist() {
	t $1;
}


# -------------------------------------------------------
#
langru() { setxkbmap -option grp:ctrl_alt_toggle us,ru; }

# -------------------------------------------------------
# Password generation
# generate password and copy to clipboard
# $1 is the length of password
pass-gen() {
	if [ $# -eq 0 ]
	  then
	    echo "No arguments supplied, usage: pass-gen <LEN>"
	    return 1
	fi

	local PASS_LEN=$1 ;
	#local PASS_GEN=$(openssl rand -base64 $PASS_LEN) ;
	local PASS_GEN=$(pwgen -y -1 $PASS_LEN) ;
	echo $PASS_GEN ;
	printf $PASS_GEN | xclip -selection c
	echo Copied to clipboard ;
	}

# -------------------------------------------------------
# Convering files

# $2 is new_file_name.wav
wav-to-mp3() { ffmpeg -i $1 ${1%wav}mp3 ;}
flac-to-mp3() { ffmpeg -i $1 ${1%flac}mp3 ;}
flac-to-mp3-dir() { 
	#for file in ./*(.);
	for file in ./*(.); do
		#do echo $file;
		#if [ "$file" == "*.txt" ]; then
		ffmpeg -i $file ${file%flac}mp3 ;
		#fi
	done
}
flac-to-wav() { ffmpeg -i $1 ${1%flac}wav ;}
mp3-to-wav() { ffmpeg -i $1 ${1%mp3}wav ;}

mp3-to-wav-dir() { for file in *; do flac-to-mp3 $file; done; }

# $1 - origin directory
# $2 - destination directory
heic-to-jpg() { 
	for file in $1/*.HEIC; do
		heif-convert $file ${file/%.HEIC/.jpg}; 
		mv $file $2
	done
}

# Documents
md-to-pdf() { pandoc $1 -o "${1%.*}".pdf; echo "${1%.*}" ;} 
md-to-pdf-toc() { 
	pandoc --toc --toc-depth 4 $1 -o "${1%.*}".pdf; echo "${1%.*}" 
	# https://superuser.com/questions/1442597/custom-table-of-contents-in-pandoc-created-pdf
;}
md-to-pdf2() { pandoc --pdf-engine=xelatex $1 -o "${1%.*}".pdf; echo "Complete: ${1%.*}" ;} 
md-to-pdf3() { pandoc -f markdown-raw_tex --pdf-engine=xelatex $1 -o "${1%.*}".pdf; echo "Complete: ${1%.*}" ;} 
md-to-pdf4() { pandoc -f markdown-raw_tex --pdf-engine=xelatex -V mainfont="/usr/share/fonts/TTF/OpenSans-Regular.ttf" $1 -o "${1%.*}".pdf; echo "Complete: ${1%.*}" ;} 

revoke_execute_files_in_dir() { find . -type f -exec chmod 600 {} \; ;}

# -------------------------------------------------------
# Creating videos

# -acodec copy to preserve the audio quality. You need -shortest or it loops forever.
# You need -shortest or it loops forever.
# -vf scale=1280:720 (Also I set the resolution to 720p here, which means you should get HD audio on YouTube :-) )
# -c:v libx264 (Lossless H.264 Video Encoding)
# -c:a aac (Advanced Audio Coding (AAC) is the successor format to MP3, and is defined in MPEG-4 part 3 (ISO/IEC 14496-3). It is often used within an MP4 container format)

# The order of your options is very important for speed, as filters (and such) are processed in the order you specify. If you change the order of these parameters, the results are dramatically different.

# parameter1 - image (png, jpg)
# parameter2 - audio (wav)
# parameter3 - new_file_name (mp4, flv, avi, mkv)
video_from_image_audio() {
	FILENAME="out.mp4"
	# if (( ${+3} )); then
	if [[ -v $3 ]]; then
		FILENAME=$3
	fi
	ffmpeg -loop 1 -i $1 -i $2 -c:v libx264 -tune stillimage -c:a aac -b:a 192k -pix_fmt yuv420p -shortest $3
	#ffmpeg -loop 1 -framerate 2 -i $1 -i $2 -c:v libx264 -preset medium -tune stillimage -crf 18 -c:a copy -shortest -pix_fmt yuv420p $3
	#ffmpeg -r 1 -loop 1 -i $1 -i $2 -acodec copy -r 1 -shortest -vf scale=1280:720 $3
}

# parameter1 - file with list of videos to concatenate (.txt)
# parameter2 - output file (.mp4)
# example of file: 
#```
# # this is a comment
#file 'file1.mp4'
#file 'file2.mp4'
#```
video_concatenate() {
	ffmpeg -f concat -safe 0 -i $1 -c copy $2
}

# -------------------------------------------------------
# Filesystem - folders, directories, files
findf() { find . -type f -iname "$1" ;}
# Can be used to find music
find-music() { find . -maxdepth 2 -type f -iname "$1*" ;}
size-of-dir() {du -h $1 ;}
size-of-dir-contents() {du -ach $1 | sort -h ;} 

lsdir-by-size() {
	# Directories only
	du -sh -- */ | sort -rh  
}

ls-by-size() {
	# Files and directories, or
	du -sh -- *  | sort -rh  
}

# System resources
disk-space-available() { df -h /dev/sda2 ;}
ram-status() { 
	#echo Memory in megabytes
	#free -t --mega
	free --human --total
;}


# -------------------------------------------------------
# Audio / Sound PulseAudio
# Source: https://github.com/gotbletu/shownotes/blob/master/pulseaudio_change_playback_output.md
pa-list() { pacmd list-sinks | awk '/index/ || /name:/' ;}
pa-set() { 
	# list all apps in playback tab (ex: cmus, mplayer, vlc)
	inputs=($(pacmd list-sink-inputs | awk '/index/ {print $2}')) 
	# set the default output device
	pacmd set-default-sink $1 &> /dev/null
	# apply the changes to all running apps to use the new output device
	for i in ${inputs[*]}; do pacmd move-sink-input $i $1 &> /dev/null; done
}
pa-playbacklist() { 
	# list individual apps
	echo "==============="
	echo "Running Apps"
	pacmd list-sink-inputs | awk '/index/ || /application.name /'

	# list all sound device
	echo "==============="
	echo "Sound Devices"
	pacmd list-sinks | awk '/index/ || /name:/'
}
pa-playbackset() { 
	# set the default output device
	pacmd set-default-sink "$2" &> /dev/null
	# apply changes to one running app to use the new output device
	pacmd move-sink-input "$1" "$2" &> /dev/null
}

# -------------------------------------------------------
# Monitors (screen)
monitor-list() { xrandr --listmonitors ;}
#monitor-disable() { xrandr --output eDP-1 --off ;}
monitor-reset() { xrandr --auto ;} # reset to default
monitor-switch-hdmi() {
	# Switch to HDMI output
	#xrandr --output HDMI-1 --auto
	xrandr --output HDMI-1 --mode 1920x1080

	# Turn off the laptop display
	xrandr --output eDP-1 --off
}
monitor-hdmi-reset() {
	xrandr --output HDMI-1 --mode 1920x1080
	xrandr --output eDP-1 --off
	xrandr --auto
}

# -------------------------------------------------------------------
# Youtube downloads

# When multiple formats of a video are available, youtube-dl will download the best ones by default. 
#ytdl-vid() { youtube-dl "$1" ;}
ytdl-vid() { yt-dlp "$1" ;}
#ytdl-mp3() { youtube-dl --extract-audio --audio-format mp3 "$1" ;}
#ytdl-mp3() { yt-dlp --extract-audio --audio-format mp3 "$1" ;} # Made it into a script
ytdl-mp3-rename() { yt-dlp --extract-audio --audio-format mp3 "$1" -o "$2" ;}
#ytdl-wav() { youtube-dl --extract-audio --audio-format wav "$1" ;}
ytdl-wav() { yt-dlp --extract-audio --audio-format wav "$1" ;}
#alias ytdla='youtube-dl -f bestaudio -o %(title)s.f%(format_id)s.%(ext)s'


# -------------------------------------------------------
# Torrents - Transmission
# note: seems like I don't need user and passoword for most of these actions
# https://man.archlinux.org/man/extra/transmission-cli/transmission-remote.1.en

# List: ls
tsm-ls() { 
	# list all torrents
	transmission-remote -n $TSM_USR_PASS --list 
;}
tsm-ls-top() { tsm-ls | sort -n -r -k1 ;}
tsm() { tsm-ls-top | tac ;} # bottom
tsm-ls-find() { tsm-ls | grep -i "$1" ;}
#tsm-list-reverse() { transmission-remote -n $TSM_USR_PASS --list | tac ;}
tsm-ls-stoped() { transmission-remote -n $TSM_USR_PASS | grep "Stopped" ;}
tsm-ls-idle() { transmission-remote -n $TSM_USR_PASS | grep "Idle" ;}
tsm-ls-active() { transmission-remote -tactive -l ;}
#tsm-list-active() { transmission-remote -n $TSM_USR_PASS | grep "Downloading" ;}
tsm-ls-incomplete() { transmission-remote -n $TSM_USR_PASS | grep -v "100%" ;}


tsm-stats() { transmission-remote -n $TSM_USR_PASS --session-stats ;} # List statistical information from the server 
tsm-sessinfo() { transmission-remote -n $TSM_USR_PASS --session-info ;} # List session information from the server

tsm-dir() { cd /var/lib/transmission/Downloads/ }
tsm-dir-gui() { tsm-dir; nautilus . & ;}
tsm-mv() { 
	# Move downloaded file to a new location
	# Params: 
	# $1 <torrent-id or hash-code>
	# $2 <destination path>
	transmission-remote -n $TSM_USR_PASS -t"$1" --move "$2"
;}
tsm-mv-default() { transmission-remote -n $TSM_USR_PASS -t"$1" --move /var/lib/transmission/Downloads/0_moved }
tsm-new-loc() {
	# tell Transmission the change of location. Don't expect 100% success rate, Transmission may detect the error before you tell about the change. 
	# Params:
	# $1 - <torrent-id or hash-code>
	# $2 - <location of files>
	transmission-remote -n $TSM_USR_PASS -t "$1" --find $2
;}


tsmd-config() { sudo nvim /var/lib/transmission-daemon/info/settings.json ;}
tsm-blocklist() { $HOME/blocklist.sh ;}		# update blocklist

# Torrent file manipulation
# add magnet link
tsm-add-single() { transmission-remote -n "$TSM_USR_PASS" --add "$1" ;} # <link>
tsm-start() { transmission-remote -n $TSM_USR_PASS -t "$1" --start ;} # <id> or all
# stop/pause
tsm-stop() { transmission-remote -n $TSM_USR_PASS -t "$1" --stop ;} # <id> or all
tsm-start-all() { transmission-remote -n "$TSM_USR_PASS" --torrent=all --start ;}
tsm-stop-all() { transmission-remote -n "$TSM_USR_PASS" --torrent=all --stop ;}

tsm-purge() { transmission-remote -n "$TSM_USR_PASS" -t "$1" --remove-and-delete ;} # delete data also
tsm-remove() { transmission-remote -n "$TSM_USR_PASS" -t "$1" --remove ;}		# leaves data alone
# example $1 = 1, $2 = 68, will remove everything from torrents and files withing that range
tsm-purge-range() { for i in {$1..$2}; do tsm-purge $i; done; }

# Get detailed information on the torrent whose ID is '1':
tsm-info() { transmission-remote -n $TSM_USR_PASS -t"$1" --info ;}
# Get a list of a torrent's files:
tsm-files() { transmission-remote -n $TSM_USR_PASS -t"$1" --files ;}

# Priorities (priority is for files, bandwidth is for the whole torrent)
tsm-pr-norm() { transmission-remote -n $TSM_USR_PASS -t"$1" --bandwidth-normal ;}
tsm-pr-high() { transmission-remote -n $TSM_USR_PASS -t"$1" --bandwidth-high ;}
#tsm-pr-low() { transmission-remote -n $TSM_USR_PASS -t"$1" --priority-low ;}

# tsm Daemon
#tsmd-start() { sudo systemctl start transmission-daemon.service ;}
#tsmd-status() { sudo systemctl status transmission-daemon.service ;}
#tsmd-stop() { sudo systemctl stop transmission-daemon.service ;}
#tsmd-reload() { sudo systemctl reload transmission-daemon.service ;}


# -------------------------------------------------------
# Development
#
# -------------------------------------------------------
# Python
pyunit() { python3 -m unittest test/"$1" ;}

# -------------------------------------------------------
# Docker
dkr() { docker ps ;}
dkr-build() {
	# $1 - Image name
	docker build -t $1 .
}
dkr-run() {
	# $1 - Container name (make it up)
	# $2 - Image name (use the one suppied to docker build)
	
	# -it - Allocate a pseudo-TTY and keep it open even if not attached.
	# --rm - Automatically remove the container when it exits.
	# Map port 5000 on the local machine to port 80 in the container.
	docker run -it --rm -p 5000:80 --name $1 $2

	# Can be reached on "localhost:5000"
}
# -------------------------------------------------------
# Dotnet Development

dnr() { dotnet run; }
dnt() { dotnet test; }

dn-cr-solution() { dotnet new sln -o $1; cd $1; }

# Projects to create
dn-cr-consoleapp() { dotnet new console -o $1; cd $1 ;}
dn-cr-classlib() { dotnet new classlib -o $1 ;}
dn-cr-webapp() { dotnet new webapp -o $1 ;}
dn-cr-api() { dotnet new webapi -o $1; cd $1; }
dn-cr-mvc() { dotnet new mvc -o $1; cd $1; }

dn-add-pkg() { 
	# example: $1 = Microsoft.EntityFrameworkCore.Sqlite
	dotnet add package $1;
}
dn-install-packages() { dotnet restore; }

# example: dotnet sln add ./PrimeService/PrimeService.csproj
dn-add-to-solution() { dotnet sln add $1; }
dn-add-reference() {dotnet add $1 reference $2 ;}

# Args: $1 = name; $2 = namespace
dn-newpage() {
	dotnet new page --name $1 --namespace $2 --output Pages
}

# $2 - Controler name
dn-new-controller() { 
	if [ $1 = "help" ]; then
		echo "arg1 = Controler name; arg2 = Contex name"
		return 0;
	fi
	dotnet aspnet-codegenerator controller -name $1Controller -async -api -m $1 -dc $2Context -outDir Controllers 
}

dn-ef-initmigrations() { dotnet ef migrations add $1; }
dn-ef-makemigrations() { dotnet ef database update; }

dn-create-unittests() {
	dotnet new xunit -o $1.Tests
	if [ -f ./$1/$1.csproj ]; then
		dotnet add ./$1.Tests/$1.Tests.csproj reference ./$1/$1.csproj
	elif [ -f ./$1.csproj ]; then
		dotnet add ./$1.Tests/$1.Tests.csproj reference ./$1.csproj
	fi

	dotnet sln add ./$1.Tests/$1.Tests.csproj
}

# $1: ProjectName
dn-create-proj_w_tests() {
	if [ $1 = "console" ]
	  then
	    TYPE="console"
	elif [ $1 = "web" ]
	  then
	    TYPE="webapp"
	else
	    return 1
	fi

	dotnet new sln -o $1_solution
	cd $1_solution

	#dotnet new classlib -o $1
	##ren .\PrimeService\Class1.cs PrimeService.cs
	#mv ./$1/Class1.cs ./$1/$1.cs
	#dotnet sln add ./$1/$1.csproj
	dotnet new console -o $1
	dotnet sln add ./$1/$1.csproj

	dotnet new xunit -o $1.Tests
	dotnet add ./$1.Tests/$1.Tests.csproj reference ./$1/$1.csproj
	dotnet sln add ./$1.Tests/$1.Tests.csproj

	# run `dotnet test` to launch the project
}

# -------------------------------------------------------
# Curl
#
curl-post-json() {
	#curl -k -H "Content-Type: application/json" -d '{"name": "walk dog", "isComplete": true}' -X POST  https://localhost:5001/api/todoitems
	curl -k -H "Content-Type: application/json" -d $1 -X POST $2
}

curl-delete() { curl -k -X "DELETE" $1 }

# -------------------------------------------------------
# Open files according to file type: i.e if image with image viewer, music with music player etc
#xf() {
#	set -o extendedglob
#	if [[ -n *.(abc|bak|tmp)(#qN) ]]; then
#		echo nomacs $1
#	else
#		echo dont know how to open it
#	fi
#
#}


# -------------------------------------------------------
# Ubuntu maintanence
# -------------------------------------------------------
# https://askubuntu.com/questions/34888/is-there-any-way-to-roll-back-the-most-recent-upgrade
# packages installed in the last 3x24h
ub-get-latest-update() { find /var/lib/dpkg/info/ -name \*.list -mtime -3 | sed 's#.list$##;s#.*/##' ;}
# With apt-cache policy, you see available versions of a program:
ub-pkg-other-versions() { sudo apt-cache policy $1 ;}

# installing a program with a specific version
# > sudo apt-get install PROGRAM=3.6.3
# Create a new file in /etc/apt/preferences.d/ (if >= 10.4) named after your program,
# ```
# Package: program
# Pin: version 3.6.3*
# Pin-Priority: 1000
# ```

#function extract()
#{
#    if [ -f $1 ] ; then
#        case $1 in
#            *.tar.bz2)   tar xvjf $1     ;;
#            *.tar.gz)    tar xvzf $1     ;;
#            *.bz2)       bunzip2 $1      ;;
#            *.rar)       unrar x $1      ;;
#            *.gz)        gunzip $1       ;;
#            *.tar)       tar xvf $1      ;;
#            *.tbz2)      tar xvjf $1     ;;
#            *.tgz)       tar xvzf $1     ;;
#            *.zip)       unzip $1        ;;
#            *.Z)         uncompress $1   ;;
#            *.7z)        7z x $1         ;;
#            *)           echo "'$1' cannot be extracted via #>extract<" ;;
#        esac
#    else
#        echo "'$1' is not a valid file!"
#    fi
#}

